resource "aws_alb_listener" "http" {
  load_balancer_arn = aws_alb.alb.id
  port              = "80"
  protocol          = "HTTP"

  default_action {
    target_group_arn = aws_alb_target_group.trg.id
    type             = "forward"
  }
}

#--- Load balancer SG
resource "aws_security_group" "sg_alb" {
  name        = "${local.project_name}-${local.environment}-alb"
  description = "ingress from everyone on port 80, egress only to container on container port 80"
  vpc_id      = aws_vpc.vpc.id

  tags = local.tags
}

resource "aws_security_group_rule" "ingress_alb_http" {
  type        = "ingress"
  description = "HTTP open for everyone"
  from_port   = 80
  to_port     = 80
  protocol    = "tcp"
  cidr_blocks = ["0.0.0.0/0"]

  security_group_id = aws_security_group.sg_alb.id
}

resource "aws_security_group_rule" "sg_alb_egress_rule_task" {
  description              = "Only allow egress on container_port 80 to container"
  type                     = "egress"
  from_port                = local.container_port
  to_port                  = local.container_port
  protocol                 = "tcp"
  source_security_group_id = aws_security_group.sg_task.id

  security_group_id = aws_security_group.sg_alb.id
}

resource "aws_alb" "alb" {
  name = "${local.project_name}-${local.environment}-alb"

  # launch lbs in public or private subnets based on "internal_lb" variable
  internal        = local.internal_lb
  subnets         = local.internal_lb == true ? aws_subnet.subprv.*.id : aws_subnet.subpub.*.id
  security_groups = [aws_security_group.sg_alb.id]
  tags            = local.tags
}

resource "aws_alb_target_group" "trg" {
  name                 = "${local.project_name}-${local.environment}-trg"
  port                 = 80
  protocol             = "HTTP"
  vpc_id               = aws_vpc.vpc.id
  target_type          = "ip"
  deregistration_delay = local.deregistration_delay

  health_check {
    path                = local.health_check_path
    matcher             = local.health_check_matcher
    interval            = local.health_check_interval
    timeout             = local.health_check_timeout
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }

  tags = local.tags
}

data "aws_elb_service_account" "alb" {
}
